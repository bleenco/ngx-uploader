{"version":3,"file":"ngx-uploader.js.map","sources":["ng://ngx-uploader/lib/interfaces.ts","ng://ngx-uploader/lib/ngx-uploader.class.ts","ng://ngx-uploader/lib/ng-file-drop.directive.ts","ng://ngx-uploader/lib/ng-file-select.directive.ts","ng://ngx-uploader/lib/ngx-uploader.module.ts"],"sourcesContent":["import { Subscription } from 'rxjs';\r\n\r\nexport interface UploaderOptions {\r\n  concurrency: number;\r\n  allowedContentTypes?: string[];\r\n  maxUploads?: number;\r\n}\r\n\r\nexport interface BlobFile extends Blob {\r\n  name: string;\r\n}\r\n\r\nexport enum UploadStatus {\r\n  Queue,\r\n  Uploading,\r\n  Done,\r\n  Cancelled\r\n}\r\n\r\nexport interface UploadProgress {\r\n  status: UploadStatus;\r\n  data?: {\r\n    percentage: number;\r\n    speed: number;\r\n    speedHuman: string;\r\n    startTime: number | null;\r\n    endTime: number | null;\r\n    eta: number | null;\r\n    etaHuman: string | null;\r\n  };\r\n}\r\n\r\nexport interface UploadFile {\r\n  id: string;\r\n  fileIndex: number;\r\n  lastModifiedDate: Date;\r\n  name: string;\r\n  size: number;\r\n  type: string;\r\n  form: FormData;\r\n  progress: UploadProgress;\r\n  response?: any;\r\n  responseStatus?: number;\r\n  sub?: Subscription | any;\r\n  nativeFile?: File;\r\n  responseHeaders?: { [key: string]: string };\r\n}\r\n\r\nexport interface UploadOutput {\r\n  type: 'addedToQueue' | 'allAddedToQueue' | 'uploading' | 'done' | 'start' | 'cancelled' | 'dragOver'\r\n      | 'dragOut' | 'drop' | 'removed' | 'removedAll' | 'rejected';\r\n  file?: UploadFile;\r\n  nativeFile?: File;\r\n}\r\n\r\nexport interface UploadInput {\r\n  type: 'uploadAll' | 'uploadFile' | 'cancel' | 'cancelAll' | 'remove' | 'removeAll';\r\n  url?: string;\r\n  method?: string;\r\n  id?: string;\r\n  fieldName?: string;\r\n  fileIndex?: number;\r\n  file?: UploadFile;\r\n  data?: { [key: string]: string | Blob };\r\n  headers?: { [key: string]: string };\r\n  includeWebKitFormBoundary?: boolean; // If false, only the file is send trough xhr.send (WebKitFormBoundary is omit)\r\n  withCredentials?: boolean;\r\n}\r\n","import { EventEmitter } from '@angular/core';\r\nimport { Observable, Subject, Subscription } from 'rxjs';\r\nimport { mergeMap, finalize } from 'rxjs/operators';\r\nimport { UploadFile, UploadOutput, UploadInput, UploadStatus, BlobFile } from './interfaces';\r\n\r\nexport function humanizeBytes(bytes: number): string {\r\n  if (bytes === 0) {\r\n    return '0 Byte';\r\n  }\r\n\r\n  const k = 1024;\r\n  const sizes: string[] = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB'];\r\n  const i: number = Math.floor(Math.log(bytes) / Math.log(k));\r\n\r\n  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\r\n}\r\n\r\nexport class NgUploaderService {\r\n  queue: UploadFile[];\r\n  serviceEvents: EventEmitter<UploadOutput>;\r\n  uploadScheduler: Subject<{ file: UploadFile, event: UploadInput }>;\r\n  subs: { id: string, sub: Subscription }[];\r\n  contentTypes: string[];\r\n  maxUploads: number;\r\n\r\n  constructor(concurrency: number = Number.POSITIVE_INFINITY, contentTypes: string[] = ['*'], maxUploads: number = Number.POSITIVE_INFINITY) {\r\n    this.queue = [];\r\n    this.serviceEvents = new EventEmitter<UploadOutput>();\r\n    this.uploadScheduler = new Subject();\r\n    this.subs = [];\r\n    this.contentTypes = contentTypes;\r\n    this.maxUploads = maxUploads;\r\n\r\n    this.uploadScheduler\r\n      .pipe(\r\n        mergeMap(upload => this.startUpload(upload), concurrency)\r\n      )\r\n      .subscribe(uploadOutput => this.serviceEvents.emit(uploadOutput));\r\n  }\r\n\r\n  handleFiles(incomingFiles: FileList): void {\r\n    const allowedIncomingFiles: File[] = [].reduce.call(incomingFiles, (acc: File[], checkFile: File, i: number) => {\r\n      const futureQueueLength = acc.length + this.queue.length + 1;\r\n      if (this.isContentTypeAllowed(checkFile.type) && futureQueueLength <= this.maxUploads) {\r\n        acc = acc.concat(checkFile);\r\n      } else {\r\n        const rejectedFile: UploadFile = this.makeUploadFile(checkFile, i);\r\n        this.serviceEvents.emit({ type: 'rejected', file: rejectedFile });\r\n      }\r\n\r\n      return acc;\r\n    }, []);\r\n\r\n    this.queue.push(...[].map.call(allowedIncomingFiles, (file: File, i: number) => {\r\n      const uploadFile: UploadFile = this.makeUploadFile(file, i);\r\n      this.serviceEvents.emit({ type: 'addedToQueue', file: uploadFile });\r\n      return uploadFile;\r\n    }));\r\n\r\n    this.serviceEvents.emit({ type: 'allAddedToQueue' });\r\n  }\r\n\r\n  initInputEvents(input: EventEmitter<UploadInput>): Subscription {\r\n    return input.subscribe((event: UploadInput) => {\r\n      switch (event.type) {\r\n        case 'uploadFile':\r\n          const uploadFileIndex = this.queue.findIndex(file => file === event.file);\r\n          if (uploadFileIndex !== -1 && event.file) {\r\n            this.uploadScheduler.next({ file: this.queue[uploadFileIndex], event: event });\r\n          }\r\n          break;\r\n        case 'uploadAll':\r\n          const files = this.queue.filter(file => file.progress.status === UploadStatus.Queue);\r\n          files.forEach(file => this.uploadScheduler.next({ file: file, event: event }));\r\n          break;\r\n        case 'cancel':\r\n          const id = event.id || null;\r\n          if (!id) {\r\n            return;\r\n          }\r\n          const subs = this.subs.filter(sub => sub.id === id);\r\n          subs.forEach(sub => {\r\n            if (sub.sub) {\r\n              sub.sub.unsubscribe();\r\n              const fileIndex = this.queue.findIndex(file => file.id === id);\r\n              if (fileIndex !== -1) {\r\n                this.queue[fileIndex].progress.status = UploadStatus.Cancelled;\r\n                this.serviceEvents.emit({type: 'cancelled', file: this.queue[fileIndex]});\r\n              }\r\n            }\r\n          });\r\n          break;\r\n        case 'cancelAll':\r\n          this.subs.forEach(sub => {\r\n            if (sub.sub) {\r\n              sub.sub.unsubscribe();\r\n            }\r\n\r\n            const file = this.queue.find(uploadFile => uploadFile.id === sub.id);\r\n            if (file) {\r\n              file.progress.status = UploadStatus.Cancelled;\r\n              this.serviceEvents.emit({ type: 'cancelled', file: file });\r\n            }\r\n          });\r\n          break;\r\n        case 'remove':\r\n          if (!event.id) {\r\n            return;\r\n          }\r\n\r\n          const i = this.queue.findIndex(file => file.id === event.id);\r\n          if (i !== -1) {\r\n            const file = this.queue[i];\r\n            this.queue.splice(i, 1);\r\n            this.serviceEvents.emit({ type: 'removed', file: file });\r\n          }\r\n          break;\r\n        case 'removeAll':\r\n          if (this.queue.length) {\r\n            this.queue = [];\r\n            this.serviceEvents.emit({ type: 'removedAll' });\r\n          }\r\n          break;\r\n      }\r\n    });\r\n  }\r\n\r\n  startUpload(upload: { file: UploadFile, event: UploadInput }): Observable<UploadOutput> {\r\n    return new Observable(observer => {\r\n      const sub = this.uploadFile(upload.file, upload.event)\r\n        .pipe(finalize(() => {\r\n          if (!observer.closed) {\r\n            observer.complete();\r\n          }\r\n        }))\r\n        .subscribe(output => {\r\n          observer.next(output);\r\n        }, err => {\r\n          observer.error(err);\r\n          observer.complete();\r\n        }, () => {\r\n          observer.complete();\r\n        });\r\n\r\n      this.subs.push({ id: upload.file.id, sub: sub });\r\n    });\r\n  }\r\n\r\n  uploadFile(file: UploadFile, event: UploadInput): Observable<UploadOutput> {\r\n    return new Observable(observer => {\r\n      const url = event.url || '';\r\n      const method = event.method || 'POST';\r\n      const data = event.data || {};\r\n      const headers = event.headers || {};\r\n\r\n      const xhr = new XMLHttpRequest();\r\n      const time: number = new Date().getTime();\r\n      let progressStartTime: number = (file.progress.data && file.progress.data.startTime) || time;\r\n      let speed = 0;\r\n      let eta: number | null = null;\r\n\r\n      xhr.upload.addEventListener('progress', (e: ProgressEvent) => {\r\n        if (e.lengthComputable) {\r\n          const percentage = Math.round((e.loaded * 100) / e.total);\r\n          const diff = new Date().getTime() - time;\r\n          speed = Math.round(e.loaded / diff * 1000);\r\n          progressStartTime = (file.progress.data && file.progress.data.startTime) || new Date().getTime();\r\n          eta = Math.ceil((e.total - e.loaded) / speed);\r\n\r\n          file.progress = {\r\n            status: UploadStatus.Uploading,\r\n            data: {\r\n              percentage: percentage,\r\n              speed: speed,\r\n              speedHuman: `${humanizeBytes(speed)}/s`,\r\n              startTime: progressStartTime,\r\n              endTime: null,\r\n              eta: eta,\r\n              etaHuman: this.secondsToHuman(eta)\r\n            }\r\n          };\r\n\r\n          observer.next({ type: 'uploading', file: file });\r\n        }\r\n      }, false);\r\n\r\n      xhr.upload.addEventListener('error', (e: Event) => {\r\n        observer.error(e);\r\n        observer.complete();\r\n      });\r\n\r\n      xhr.onreadystatechange = () => {\r\n        if (xhr.readyState === XMLHttpRequest.DONE) {\r\n          const speedAverage = Math.round(file.size / (new Date().getTime() - progressStartTime) * 1000);\r\n          file.progress = {\r\n            status: UploadStatus.Done,\r\n            data: {\r\n              percentage: 100,\r\n              speed: speedAverage,\r\n              speedHuman: `${humanizeBytes(speedAverage)}/s`,\r\n              startTime: progressStartTime,\r\n              endTime: new Date().getTime(),\r\n              eta: eta,\r\n              etaHuman: this.secondsToHuman(eta || 0)\r\n            }\r\n          };\r\n\r\n          file.responseStatus = xhr.status;\r\n\r\n          try {\r\n            file.response = JSON.parse(xhr.response);\r\n          } catch (e) {\r\n            file.response = xhr.response;\r\n          }\r\n\r\n          file.responseHeaders = this.parseResponseHeaders(xhr.getAllResponseHeaders());\r\n\r\n          observer.next({ type: 'done', file: file });\r\n\r\n          observer.complete();\r\n        }\r\n      };\r\n\r\n      xhr.open(method, url, true);\r\n      xhr.withCredentials = event.withCredentials ? true : false;\r\n\r\n      try {\r\n        const uploadFile = <BlobFile>file.nativeFile;\r\n        const uploadIndex = this.queue.findIndex(outFile => outFile.nativeFile === uploadFile);\r\n\r\n        if (this.queue[uploadIndex].progress.status === UploadStatus.Cancelled) {\r\n          observer.complete();\r\n        }\r\n\r\n        Object.keys(headers).forEach(key => xhr.setRequestHeader(key, headers[key]));\r\n\r\n        let bodyToSend;\r\n\r\n        if (event.includeWebKitFormBoundary !== false) {\r\n          Object.keys(data).forEach(key => file.form.append(key, data[key]));\r\n          file.form.append(event.fieldName || 'file', uploadFile, uploadFile.name);\r\n          bodyToSend = file.form;\r\n        } else {\r\n          bodyToSend = uploadFile;\r\n        }\r\n\r\n        this.serviceEvents.emit({ type: 'start', file: file });\r\n        xhr.send(bodyToSend);\r\n      } catch (e) {\r\n        observer.complete();\r\n      }\r\n\r\n      return () => {\r\n        xhr.abort();\r\n      };\r\n    });\r\n  }\r\n\r\n  secondsToHuman(sec: number): string {\r\n    return new Date(sec * 1000).toISOString().substr(11, 8);\r\n  }\r\n\r\n  generateId(): string {\r\n    return Math.random().toString(36).substring(7);\r\n  }\r\n\r\n  setContentTypes(contentTypes: string[]): void {\r\n    if (typeof contentTypes != 'undefined' && contentTypes instanceof Array) {\r\n      if (contentTypes.find((type: string) => type === '*') !== undefined) {\r\n        this.contentTypes = ['*'];\r\n      } else {\r\n        this.contentTypes = contentTypes;\r\n      }\r\n      return;\r\n    }\r\n    this.contentTypes = ['*'];\r\n  }\r\n\r\n  allContentTypesAllowed(): boolean {\r\n    return this.contentTypes.find((type: string) => type === '*') !== undefined;\r\n  }\r\n\r\n  isContentTypeAllowed(mimetype: string): boolean {\r\n    if (this.allContentTypesAllowed()) {\r\n      return true;\r\n    }\r\n    return this.contentTypes.find((type: string) => type === mimetype) !== undefined;\r\n  }\r\n\r\n  makeUploadFile(file: File, index: number): UploadFile {\r\n    return {\r\n      fileIndex: index,\r\n      id: this.generateId(),\r\n      name: file.name,\r\n      size: file.size,\r\n      type: file.type,\r\n      form: new FormData(),\r\n      progress: {\r\n        status: UploadStatus.Queue,\r\n        data: {\r\n          percentage: 0,\r\n          speed: 0,\r\n          speedHuman: `${humanizeBytes(0)}/s`,\r\n          startTime: null,\r\n          endTime: null,\r\n          eta: null,\r\n          etaHuman: null\r\n        }\r\n      },\r\n      lastModifiedDate: file.lastModifiedDate,\r\n      sub: undefined,\r\n      nativeFile: file\r\n    };\r\n  }\r\n\r\n  private parseResponseHeaders(httpHeaders: ByteString) {\r\n    if (!httpHeaders) {\r\n      return;\r\n    }\r\n    return httpHeaders.split('\\n')\r\n      .map(x => x.split(/: */, 2))\r\n      .filter(x => x[0])\r\n      .reduce((ac, x) => {\r\n        ac[x[0]] = x[1];\r\n        return ac;\r\n      }, {});\r\n  }\r\n}\r\n","import { Directive, ElementRef, EventEmitter, Input, Output, OnInit, OnDestroy, HostListener } from '@angular/core';\r\nimport { UploadOutput, UploadInput, UploaderOptions } from './interfaces';\r\nimport { NgUploaderService } from './ngx-uploader.class';\r\nimport { Subscription } from 'rxjs';\r\n\r\n@Directive({\r\n  selector: '[ngFileDrop]'\r\n})\r\nexport class NgFileDropDirective implements OnInit, OnDestroy {\r\n  @Input() options: UploaderOptions;\r\n  @Input() uploadInput: EventEmitter<UploadInput>;\r\n  @Output() uploadOutput: EventEmitter<UploadOutput>;\r\n\r\n  upload: NgUploaderService;\r\n  el: HTMLInputElement;\r\n\r\n  _sub: Subscription[];\r\n\r\n  constructor(public elementRef: ElementRef) {\r\n    this.uploadOutput = new EventEmitter<UploadOutput>();\r\n  }\r\n\r\n  ngOnInit() {\r\n    this._sub = [];\r\n    const concurrency = this.options && this.options.concurrency || Number.POSITIVE_INFINITY;\r\n    const allowedContentTypes = this.options && this.options.allowedContentTypes || ['*'];\r\n    const maxUploads = this.options && this.options.maxUploads || Number.POSITIVE_INFINITY;\r\n    this.upload = new NgUploaderService(concurrency, allowedContentTypes, maxUploads);\r\n\r\n    this.el = this.elementRef.nativeElement;\r\n\r\n    this._sub.push(\r\n      this.upload.serviceEvents.subscribe((event: UploadOutput) => {\r\n        this.uploadOutput.emit(event);\r\n      })\r\n    );\r\n\r\n    if (this.uploadInput instanceof EventEmitter) {\r\n      this._sub.push(this.upload.initInputEvents(this.uploadInput));\r\n    }\r\n\r\n    this.el.addEventListener('drop', this.stopEvent, false);\r\n    this.el.addEventListener('dragenter', this.stopEvent, false);\r\n    this.el.addEventListener('dragover', this.stopEvent, false);\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._sub.forEach(sub => sub.unsubscribe());\r\n  }\r\n\r\n  stopEvent = (e: Event) => {\r\n    e.stopPropagation();\r\n    e.preventDefault();\r\n  }\r\n\r\n  @HostListener('drop', ['$event'])\r\n  public onDrop(e: any) {\r\n    e.stopPropagation();\r\n    e.preventDefault();\r\n\r\n    const event: UploadOutput = { type: 'drop' };\r\n    this.uploadOutput.emit(event);\r\n    this.upload.handleFiles(e.dataTransfer.files);\r\n  }\r\n\r\n  @HostListener('dragover', ['$event'])\r\n  public onDragOver(e: Event) {\r\n    if (!e) {\r\n      return;\r\n    }\r\n\r\n    const event: UploadOutput = { type: 'dragOver' };\r\n    this.uploadOutput.emit(event);\r\n  }\r\n\r\n  @HostListener('dragleave', ['$event'])\r\n  public onDragLeave(e: Event) {\r\n    if (!e) {\r\n      return;\r\n    }\r\n\r\n    const event: UploadOutput = { type: 'dragOut' };\r\n    this.uploadOutput.emit(event);\r\n  }\r\n}\r\n","import { Directive, ElementRef, EventEmitter, Input, Output, OnInit, OnDestroy } from '@angular/core';\r\nimport { UploadOutput, UploaderOptions } from './interfaces';\r\nimport { NgUploaderService } from './ngx-uploader.class';\r\nimport { Subscription } from 'rxjs';\r\n\r\n@Directive({\r\n  selector: '[ngFileSelect]'\r\n})\r\nexport class NgFileSelectDirective implements OnInit, OnDestroy {\r\n  @Input() options: UploaderOptions;\r\n  @Input() uploadInput: EventEmitter<any>;\r\n  @Output() uploadOutput: EventEmitter<UploadOutput>;\r\n\r\n  upload: NgUploaderService;\r\n  el: HTMLInputElement;\r\n\r\n  _sub: Subscription[];\r\n\r\n  constructor(public elementRef: ElementRef) {\r\n    this.uploadOutput = new EventEmitter<UploadOutput>();\r\n  }\r\n\r\n  ngOnInit() {\r\n    this._sub = [];\r\n    const concurrency = this.options && this.options.concurrency || Number.POSITIVE_INFINITY;\r\n    const allowedContentTypes = this.options && this.options.allowedContentTypes || ['*'];\r\n    const maxUploads = this.options && this.options.maxUploads || Number.POSITIVE_INFINITY;\r\n    this.upload = new NgUploaderService(concurrency, allowedContentTypes, maxUploads);\r\n\r\n    this.el = this.elementRef.nativeElement;\r\n    this.el.addEventListener('change', this.fileListener, false);\r\n\r\n    this._sub.push(\r\n      this.upload.serviceEvents.subscribe((event: UploadOutput) => {\r\n        this.uploadOutput.emit(event);\r\n      })\r\n    );\r\n\r\n    if (this.uploadInput instanceof EventEmitter) {\r\n      this._sub.push(this.upload.initInputEvents(this.uploadInput));\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this.el){\r\n      this.el.removeEventListener('change', this.fileListener, false);\r\n      this._sub.forEach(sub => sub.unsubscribe());\r\n    }\r\n  }\r\n\r\n  fileListener = () => {\r\n    if (this.el.files) {\r\n      this.upload.handleFiles(this.el.files);\r\n    }\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { NgFileDropDirective } from './ng-file-drop.directive';\r\nimport { NgFileSelectDirective } from './ng-file-select.directive';\r\n\r\n@NgModule({\r\n  declarations: [NgFileDropDirective, NgFileSelectDirective],\r\n  exports: [NgFileDropDirective, NgFileSelectDirective]\r\n})\r\nexport class NgxUploaderModule { }\r\n"],"names":[],"mappings":"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"}
